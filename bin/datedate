#!/usr/bin/env php
<?php

// See https://github.com/chelmertz/dotfiles/blob/master/bin/datedate
// By Carl Helmertz, helmertz@gmail.com

function datedate_help() {
	return <<<APA
datedate - Translate date to timestamp, and timestamp to date.

Born out of frustation of remembering `date +%s` or `date -d @0`. We include
some php magic string-to-date parsing powers into the mix.

SYNOPSIS

	datedate
	datedate [timestamp]
	datedate [English textual datetime]
	datedate yesterday
	datedate yesterday 20:00

	datedate -h
	datedate --help


EXAMPLE OUTPUT

	$ datedate
	date	Sunday 2024-12-15 00:12:42 Europe/Stockholm 2024
	iso	2024-12-15T00:12:42+01:00
	unix	1734217962
	rel	exactly now

	$ datedate 0
	date	Thursday 1970-01-01 01:00:00 Europe/Stockholm 1970
	iso	1970-01-01T01:00:00+01:00
	unix	0
	rel	54 years, 12 months, 1 day, 23 hours, 13 minutes ago

	$ datedate yesterday -20 seconds
	date	Friday 2024-12-13 23:59:40 Europe/Stockholm 2024
	iso	2024-12-13T23:59:40+01:00
	unix	1734130780
	rel	1 day, 13 minutes, 41 seconds ago


SEE ALSO
	See https://secure.php.net/strtotime for specification about
	"English textual datetime".
APA;
}

function debug_print($message) {
	fwrite(STDERR, wordwrap("debug: $message\n", 75, "\ndebug: ", true));
}

function datedate($arg) {
	$full_format = "l Y-m-d H:i:s e Y";
	// see http://php.net/manual/en/function.date.php
	if(!strlen($arg)) {
		return array(
			"date\t".date($full_format),
			"iso\t".date('c'),
			"unix\t".time(),
			"rel\texactly now"
		);
	}

	if(is_numeric($arg)) {
		if(strlen($arg) == 13) {
			$arg = substr($arg, 0, 10);
			debug_print("Assuming UNIX timestamp was given with millisecond precision, rounding to $arg");
		}
		$unix = $arg;
	} else {
		$unix = strtotime($arg);
	}

	return array(
		"date\t".date($full_format, $unix),
		"iso\t".date('c', $unix),
		"unix\t".$unix,
		"rel\t".human_relative($unix)
	);
}

function human_relative($unix) {
	$seconds_delta = $unix - time();
	if ($seconds_delta == 0) {
		return "exactly now";
	}

	$diff = abs($seconds_delta);
	$human = [];
	foreach(["year" => 60*60*24*365, "month" => 60*60*24*30, "week" => 60*60*24*7, "day" => 60*60*24, "hour" => 60*60, "minute" => 60, "second" => 1] as $unit => $seconds) {
		if ($diff < $seconds) {
			continue;
		}
		$units = floor($diff/$seconds);
		$pluralized = $units == 1 ? $unit : "${unit}s";
		array_push($human, "$units $pluralized");
		$diff %= $seconds;
	}
	$humanized = implode(", ", $human);
	if ($seconds_delta > 0) {
		return "$humanized in the future";
	} else {
		return "$humanized ago";
	}
}

// "php's version" of python's "if __name__ == '__main__'"
if(!debug_backtrace() && PHP_SAPI == 'cli') {
	if(array_intersect(array('-h', '--help'), $argv)) {
		echo datedate_help()."\n";
		exit(0);
	}

	// PHP's timezone can be configured as UTC, and PHP through CLI reuses
	// that setting. This script is made desktop usage, so let's override
	// the 'server time' with what's stored in the environment variable TZ,
	// if applicable.
	if(getenv('TZ')) {
		date_default_timezone_set(getenv('TZ'));
	}

	$arg = $argv;
	array_shift($arg);
	$arg = implode(" ", array_map('trim', $arg));
	echo implode("\n", datedate($arg))."\n";
}
